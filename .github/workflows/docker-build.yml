name: Docker Build and Push
run-name: Docker Build and Push @${{ inputs.release_type }} by @${{ github.actor }}
on:
  workflow_call:
    inputs:
      main_version:
        required: false
        type: string
        description: "Main version to tag images with. If not provided, will be extracted from code."
      base_version:
        required: false
        type: string
        description: "Base version to tag images with. If not provided, will be extracted from code."
      release_type:
        required: true
        type: string
        description: "Release type. One of 'main', 'main-ep', 'base', 'nightly-main', 'nightly-base', 'main-all', 'nightly-main-all'."
      pre_release:
        required: false
        type: boolean
        default: false
      ref:
        required: true
        type: string
        description: "Ref to check out (branch, tag, or commit). This is required -- it specifies where the source code for the release is located."

  workflow_dispatch:
    inputs:
      main_version:
        description: "Main version to tag images with. If not provided, will be extracted from code."
        required: false
        type: string
      base_version:
        description: "Base version to tag images with. If not provided, will be extracted from code."
        required: false
        type: string
      release_type:
        description: "Type of release. One of 'main', 'main-ep', 'base', 'nightly-main', 'nightly-base', 'main-all', 'nightly-main-all'."
        required: true
        type: string
      pre_release:
        description: "Whether this is a pre-release."
        required: false
        type: boolean
        default: false
      ref:
        required: true
        type: string
        description: "Ref to check out (branch, tag, or commit). This is required -- it specifies where the source code for the release is located."


env:
  PYTHON_VERSION: "3.13"
  TEST_TAG: "langflowai/langflow:test"

jobs:
  get-base-version:
    name: Get Base Version
    if: ${{ inputs.release_type == 'base' || inputs.release_type == 'nightly-base' }}
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Check out the code
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.ref }}
      - name: Get version
        id: version
        run: |
          if [ -n "${{ inputs.base_version }}" ]; then
            echo "Using provided base version: ${{ inputs.base_version }}"
            echo version=${{ inputs.base_version }} >> $GITHUB_OUTPUT
          else
            echo "Extracting base version from code"
            version=$(uv tree | grep 'langflow-base' | awk '{print $3}' | sed 's/^v//' | head -n 1)
            echo "Extracted base version: $version"
            echo version=$version >> $GITHUB_OUTPUT
          fi

  get-main-version:
    name: Get Main Version
    if: ${{ inputs.release_type == 'main' || inputs.release_type == 'main-ep' || inputs.release_type == 'nightly-main' || inputs.release_type == 'main-all' || inputs.release_type == 'nightly-main-all' }}
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Check out the code
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.ref }}
      - name: Get version
        id: version
        run: |
          if [ -n "${{ inputs.main_version }}" ]; then
            echo "Using provided main version: ${{ inputs.main_version }}"
            echo version=${{ inputs.main_version }} >> $GITHUB_OUTPUT
          else
            echo "Extracting main version from code"
            version=$(uv tree | grep 'langflow' | grep -v 'langflow-base' | awk '{print $2}' | sed 's/^v//')
            echo "Extracted main version: $version"
            echo version=$version >> $GITHUB_OUTPUT
          fi
  setup-base:
    name: Setup Base Build
    if: ${{ inputs.release_type == 'base' || inputs.release_type == 'nightly-base' }}
    runs-on: ubuntu-latest
    needs: get-base-version
    outputs:
      docker_tags: ${{ steps.set-vars.outputs.docker_tags }}
      ghcr_tags: ${{ steps.set-vars.outputs.ghcr_tags }}
      file: ${{ steps.set-vars.outputs.file }}
    steps:
      - name: Set Base Tags and Dockerfile
        id: set-vars
        run: |
          nightly_suffix=""
          if [[ "${{ inputs.release_type }}" == "nightly-base" ]]; then
            nightly_suffix="-nightly"
          fi
          echo "docker_tags=langflowai/langflow${nightly_suffix}:base-${{ needs.get-base-version.outputs.version }},langflowai/langflow${nightly_suffix}:base-latest" >> $GITHUB_OUTPUT
          echo "ghcr_tags=ghcr.io/langflow-ai/langflow${nightly_suffix}:base-${{ needs.get-base-version.outputs.version }},ghcr.io/langflow-ai/langflow${nightly_suffix}:base-latest" >> $GITHUB_OUTPUT
          echo "file=./docker/build_and_push_base.Dockerfile" >> $GITHUB_OUTPUT

  setup-main:
    name: Setup Main Build
    if: ${{ inputs.release_type == 'main' }}
    runs-on: ubuntu-latest
    needs: get-main-version
    outputs:
      docker_tags: ${{ steps.set-vars.outputs.docker_tags }}
      ghcr_tags: ${{ steps.set-vars.outputs.ghcr_tags }}
      file: ${{ steps.set-vars.outputs.file }}
    steps:
      - name: Set Main Tags and Dockerfile
        id: set-vars
        run: |
          if [[ "${{ inputs.pre_release }}" == "true" ]]; then
            echo "docker_tags=langflowai/langflow:${{ needs.get-main-version.outputs.version }}" >> $GITHUB_OUTPUT
            echo "ghcr_tags=ghcr.io/langflow-ai/langflow:${{ needs.get-main-version.outputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "docker_tags=langflowai/langflow:${{ needs.get-main-version.outputs.version }},langflowai/langflow:latest" >> $GITHUB_OUTPUT
            echo "ghcr_tags=ghcr.io/langflow-ai/langflow:${{ needs.get-main-version.outputs.version }},ghcr.io/langflow-ai/langflow:latest" >> $GITHUB_OUTPUT
          fi
          echo "file=./docker/build_and_push.Dockerfile" >> $GITHUB_OUTPUT

  setup-main-ep:
    name: Setup Main EP Build
    if: ${{ inputs.release_type == 'main-ep' }}
    runs-on: ubuntu-latest
    needs: get-main-version
    outputs:
      docker_tags: ${{ steps.set-vars.outputs.docker_tags }}
      ghcr_tags: ${{ steps.set-vars.outputs.ghcr_tags }}
      file: ${{ steps.set-vars.outputs.file }}
    steps:
      - name: Set Main EP Tags and Dockerfile
        id: set-vars
        run: |
          echo "docker_tags=langflowai/langflow-ep:${{ needs.get-main-version.outputs.version }},langflowai/langflow-ep:latest" >> $GITHUB_OUTPUT
          echo "ghcr_tags=ghcr.io/langflow-ai/langflow-ep:${{ needs.get-main-version.outputs.version }},ghcr.io/langflow-ai/langflow-ep:latest" >> $GITHUB_OUTPUT
          echo "file=./docker/build_and_push_ep.Dockerfile" >> $GITHUB_OUTPUT

  setup-main-all:
    name: Setup Main All Build
    if: ${{ inputs.release_type == 'main-all' }}
    runs-on: ubuntu-latest
    needs: get-main-version
    outputs:
      docker_tags: ${{ steps.set-vars.outputs.docker_tags }}
      ghcr_tags: ${{ steps.set-vars.outputs.ghcr_tags }}
      file: ${{ steps.set-vars.outputs.file }}
    steps:
      - name: Set Main All Tags and Dockerfile
        id: set-vars
        run: |
          echo "docker_tags=langflowai/langflow-all:${{ needs.get-main-version.outputs.version }},langflowai/langflow-all:latest" >> $GITHUB_OUTPUT
          echo "ghcr_tags=ghcr.io/langflow-ai/langflow-all:${{ needs.get-main-version.outputs.version }},ghcr.io/langflow-ai/langflow-all:latest" >> $GITHUB_OUTPUT
          echo "file=./docker/build_and_push_with_extras.Dockerfile" >> $GITHUB_OUTPUT

  setup-nightly-main:
    name: Setup Nightly Main Build
    if: ${{ inputs.release_type == 'nightly-main' || inputs.release_type == 'nightly-main-all' }}
    runs-on: ubuntu-latest
    needs: get-main-version
    outputs:
      docker_tags: ${{ steps.set-vars.outputs.docker_tags }}
      ghcr_tags: ${{ steps.set-vars.outputs.ghcr_tags }}
      file: ${{ steps.set-vars.outputs.file }}
    steps:
      - name: Set Dockerfile and Tags
        id: set-vars
        run: |
          nightly_suffix=''
          if [[ "${{ inputs.release_type }}" == "nightly-base" || "${{ inputs.release_type }}" == "nightly-main" || "${{ inputs.release_type }}" == "nightly-main-all" ]]; then
            nightly_suffix="-nightly"
          fi

          if [[ "${{ inputs.release_type }}" == "base" || "${{ inputs.release_type }}" == "nightly-base" ]]; then
            # LANGFLOW-BASE RELEASE
            echo "docker_tags=langflowai/langflow${nightly_suffix}:base-${{ needs.get-version.outputs.version }},langflowai/langflow${nightly_suffix}:base-latest" >> $GITHUB_OUTPUT
            echo "ghcr_tags=ghcr.io/langflow-ai/langflow${nightly_suffix}:base-${{ needs.get-version.outputs.version }},ghcr.io/langflow-ai/langflow${nightly_suffix}:base-latest" >> $GITHUB_OUTPUT
            echo "file=./docker/build_and_push_base.Dockerfile" >> $GITHUB_OUTPUT
          else
            if [[ "${{ inputs.pre_release }}" == "true" ]]; then
              # LANGFLOW-MAIN PRE-RELEASE
              echo "docker_tags=langflowai/langflow${nightly_suffix}:${{ needs.get-version.outputs.version }}" >> $GITHUB_OUTPUT
              echo "ghcr_tags=ghcr.io/langflow-ai/langflow${nightly_suffix}:${{ needs.get-version.outputs.version }}" >> $GITHUB_OUTPUT
              echo "file=./docker/build_and_push.Dockerfile" >> $GITHUB_OUTPUT
            elif [[ "${{ inputs.release_type }}" == "main-ep" ]]; then
              # LANGFLOW-MAIN (ENTRYPOINT) RELEASE
              echo "docker_tags=langflowai/langflow-ep${nightly_suffix}:${{ needs.get-version.outputs.version }},langflowai/langflow-ep${nightly_suffix}:latest" >> $GITHUB_OUTPUT
              echo "ghcr_tags=ghcr.io/langflow-ai/langflow-ep${nightly_suffix}:${{ needs.get-version.outputs.version }},ghcr.io/langflow-ai/langflow-ep${nightly_suffix}:latest" >> $GITHUB_OUTPUT
              echo "file=./docker/build_and_push_ep.Dockerfile" >> $GITHUB_OUTPUT
            elif [[ "${{ inputs.release_type }}" == "main" || "${{ inputs.release_type }}" == "nightly-main" ]]; then
              # LANGFLOW-MAIN RELEASE
              echo "docker_tags=langflowai/langflow${nightly_suffix}:${{ needs.get-version.outputs.version }},langflowai/langflow${nightly_suffix}:latest" >> $GITHUB_OUTPUT
              echo "ghcr_tags=ghcr.io/langflow-ai/langflow${nightly_suffix}:${{ needs.get-version.outputs.version }},ghcr.io/langflow-ai/langflow${nightly_suffix}:latest" >> $GITHUB_OUTPUT
              echo "file=./docker/build_and_push.Dockerfile" >> $GITHUB_OUTPUT
            elif [[ "${{ inputs.release_type }}" == "main-all" || "${{ inputs.release_type }}" == "nightly-main-all" ]]; then
              # LANGFLOW-MAIN (ALL OPTIONAL DEPS) RELEASE
              echo "docker_tags=langflowai/langflow-all${nightly_suffix}:${{ needs.get-version.outputs.version }},langflowai/langflow-all${nightly_suffix}:latest" >> $GITHUB_OUTPUT
              echo "ghcr_tags=ghcr.io/langflow-ai/langflow-all${nightly_suffix}:${{ needs.get-version.outputs.version }},ghcr.io/langflow-ai/langflow-all${nightly_suffix}:latest" >> $GITHUB_OUTPUT
              echo "file=./docker/build_and_push_with_extras.Dockerfile" >> $GITHUB_OUTPUT
            else
              echo "Invalid release type. Exiting the workflow."
              exit 1
            fi
          fi
  build:
    runs-on: [self-hosted, linux, ARM64, langflow-ai-arm64-40gb]
    needs: [get-version, setup]
    steps:
      - name: Check out the code at a specific ref
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.ref }}
          persist-credentials: true
      - name: "Setup Environment"
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          python-version: ${{ env.PYTHON_VERSION }}
          prune-cache: false

      # - name: Install the project
        # run: |
        #   if [[ "${{ inputs.release_type }}" == "base" || "${{ inputs.release_type }}" == "nightly-base" ]]; then
        #     uv sync --directory src/backend/base --no-dev --no-sources
        #   else
        #     uv sync --no-dev --no-sources
        #   fi

      - name: Docker System Info and Cleanup
        run: |
          echo "=== Docker System Usage Before Cleanup ==="
          docker system df || true
          docker buildx du || true

          echo "=== Cleaning up Docker System ==="
          docker system prune -af --volumes || true
          docker buildx prune -af || true

          echo "=== Docker System Usage After Cleanup ==="
          docker system df || true
          docker buildx du || true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          driver: docker-container
          driver-opts: |
            image=moby/buildkit:v0.22.0
            network=host

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push to Docker Hub
        uses: Wandalen/wretry.action@master
        with:
          action: docker/build-push-action@v6
          with: |
            context: .
            push: true
            file: ${{ needs.setup.outputs.file }}
            tags: ${{ needs.setup.outputs.docker_tags }}
            platforms: linux/amd64,linux/arm64

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TEMP_GHCR_TOKEN}}

      - name: Build and push to Github Container Registry
        uses: Wandalen/wretry.action@master
        with:
          action: docker/build-push-action@v6
          with: |
            context: .
            push: true
            file: ${{ needs.setup.outputs.file }}
            tags: ${{ needs.setup.outputs.ghcr_tags }}
            platforms: linux/amd64,linux/arm64

  build_components:
    if: ${{ inputs.release_type == 'main' }}
    runs-on: [self-hosted, linux, ARM64, langflow-ai-arm64-40gb]
    permissions:
      packages: write
    needs: [build, get-version]
    strategy:
      matrix:
        component: [docker-backend, docker-frontend, ghcr-backend, ghcr-frontend]
        include:
          - component: docker-backend
            dockerfile: ./docker/build_and_push_backend.Dockerfile
            tags: langflowai/langflow-backend:${{ needs.get-version.outputs.version }},langflowai/langflow-backend:latest
            langflow_image: langflowai/langflow:${{ needs.get-version.outputs.version }}
          - component: docker-frontend
            dockerfile: ./docker/frontend/build_and_push_frontend.Dockerfile
            tags: langflowai/langflow-frontend:${{ needs.get-version.outputs.version }},langflowai/langflow-frontend:latest
            langflow_image: langflowai/langflow:${{ needs.get-version.outputs.version }}
          - component: ghcr-backend
            dockerfile: ./docker/build_and_push_backend.Dockerfile
            tags: ghcr.io/langflow-ai/langflow-backend:${{ needs.get-version.outputs.version }},ghcr.io/langflow-ai/langflow-backend:latest
            langflow_image: ghcr.io/langflow-ai/langflow:${{ needs.get-version.outputs.version }}
          - component: ghcr-frontend
            dockerfile: ./docker/frontend/build_and_push_frontend.Dockerfile
            tags: ghcr.io/langflow-ai/langflow-frontend:${{ needs.get-version.outputs.version }},ghcr.io/langflow-ai/langflow-frontend:latest
            langflow_image: ghcr.io/langflow-ai/langflow:${{ needs.get-version.outputs.version }}
    steps:
      - name: Check out the code at a specific ref
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.ref }}

      - name: Docker System Info and Cleanup
        run: |
          echo "=== Docker System Usage Before Cleanup ==="
          docker system df || true
          docker buildx du || true

          echo "=== Cleaning up Docker System ==="
          docker system prune -af --volumes || true
          docker buildx prune -af || true

          echo "=== Docker System Usage After Cleanup ==="
          docker system df || true
          docker buildx du || true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          driver: docker-container
          driver-opts: |
            image=moby/buildkit:v0.22.0
            network=host


      - name: Login to Docker Hub
        if: ${{ matrix.component == 'docker-backend' }} || ${{ matrix.component == 'docker-frontend' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Github Container Registry
        if: ${{ matrix.component == 'ghcr-backend' }} || ${{ matrix.component == 'ghcr-frontend' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TEMP_GHCR_TOKEN}}

      - name: Wait for propagation (for backend)
        run: sleep 120

      - name: Build and push ${{ matrix.component }}
        uses: Wandalen/wretry.action@master
        with:
          action: docker/build-push-action@v6
          with: |
            context: .
            push: true
            build-args: |
              LANGFLOW_IMAGE=${{ matrix.langflow_image }}
            file: ${{ matrix.dockerfile }}
            tags: ${{ matrix.tags }}
            # provenance: false will result in a single manifest for all platforms which makes the image pullable from arm64 machines via the emulation (e.g. Apple Silicon machines)
            provenance: false

  restart-space:
    name: Restart HuggingFace Spaces
    if: ${{ inputs.release_type == 'main' }}
    runs-on: ubuntu-latest
    needs: [build, get-version]
    strategy:
      matrix:
        python-version:
          - "3.13"
    steps:
      - name: Check out the code at a specific ref
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.ref }}
      - name: "Setup Environment"
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          python-version: ${{ matrix.python-version }}
          prune-cache: false

      - name: Restart HuggingFace Spaces Build
        run: |
          uv run ./scripts/factory_restart_space.py --space "Langflow/Langflow" --token ${{ secrets.HUGGINGFACE_API_TOKEN }}



